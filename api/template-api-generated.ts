/* tslint:disable */
/* eslint-disable */
/*
Resources and endpoints

When I started SignWell in 2019, I saw there was a need for an alternative to the hard-to-use and expensive e-signature software already out there. Documents can be complicated enough, but getting a document signed shouldn't be complicated too.

At SignWell, we pride ourselves not only on the ease and affordability of our e-signature process but also on our personalized and industry-leading customer support â€” whether it's for individual use or larger team accounts, SignWell is here to help you feel comfortable and confident getting your documents signed.

The SignWell mission? Simplify how documents get signed for millions of people and businesses. We're excited to help you continue to move toward the future of paperless document signing.

Ruben Gamez
Founder, SignWell

The version of the OpenAPI document: 1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AttachmentRequestsForTemplateMapInner } from '../models';
// @ts-ignore
import { CopiedPlaceholdersMapInner } from '../models';
// @ts-ignore
import { DocumentTemplateRequest } from '../models';
// @ts-ignore
import { DocumentTemplateUpdateRequest } from '../models';
// @ts-ignore
import { FilesMapInner } from '../models';
// @ts-ignore
import { PlaceholdersMapInner } from '../models';
// @ts-ignore
import { TemplateCreateNew400Response } from '../models';
// @ts-ignore
import { TemplateCreateNew422Response } from '../models';
// @ts-ignore
import { TemplateCreateNewResponse } from '../models';
// @ts-ignore
import { TemplateDeleteDocumentTemplateResponse } from '../models';
// @ts-ignore
import { TemplateGetTemplateData404Response } from '../models';
// @ts-ignore
import { TemplateGetTemplateDataResponse } from '../models';
// @ts-ignore
import { TemplateUpdateExistingTemplate400Response } from '../models';
// @ts-ignore
import { TemplateUpdateExistingTemplate422Response } from '../models';
// @ts-ignore
import { TemplateUpdateExistingTemplateResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TemplateApi - axios parameter creator
 * @export
 */
export const TemplateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new template.
         * @summary Create Template
         * @param {DocumentTemplateRequest} [documentTemplateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNew: async (documentTemplateRequest?: DocumentTemplateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/document_templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: documentTemplateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/document_templates',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(documentTemplateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a template. Supply the unique template ID from either a Create Template request or template page URL.
         * @summary Delete Template
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDocumentTemplate: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteDocumentTemplate', 'id', id)
            const localVarPath = `/api/v1/document_templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/document_templates/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a template and all associated template data. Supply the unique template ID from either a Create Template request or template page URL.
         * @summary Get Template
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplateData: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTemplateData', 'id', id)
            const localVarPath = `/api/v1/document_templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/document_templates/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an existing template.
         * @summary Update Template
         * @param {string} id 
         * @param {DocumentTemplateUpdateRequest} [documentTemplateUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExistingTemplate: async (id: string, documentTemplateUpdateRequest?: DocumentTemplateUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateExistingTemplate', 'id', id)
            const localVarPath = `/api/v1/document_templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: documentTemplateUpdateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/document_templates/{id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(documentTemplateUpdateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TemplateApi - functional programming interface
 * @export
 */
export const TemplateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TemplateApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new template.
         * @summary Create Template
         * @param {TemplateApiCreateNewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNew(requestParameters: TemplateApiCreateNewRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemplateCreateNewResponse>> {
            const documentTemplateRequest: DocumentTemplateRequest = {
                files: requestParameters.files,
                name: requestParameters.name,
                subject: requestParameters.subject,
                message: requestParameters.message,
                placeholders: requestParameters.placeholders,
                copied_placeholders: requestParameters.copied_placeholders,
                draft: requestParameters.draft,
                expires_in: requestParameters.expires_in,
                reminders: requestParameters.reminders,
                apply_signing_order: requestParameters.apply_signing_order,
                api_application_id: requestParameters.api_application_id,
                text_tags: requestParameters.text_tags,
                redirect_url: requestParameters.redirect_url,
                allow_decline: requestParameters.allow_decline,
                allow_reassign: requestParameters.allow_reassign,
                decline_redirect_url: requestParameters.decline_redirect_url,
                metadata: requestParameters.metadata,
                fields: requestParameters.fields,
                attachment_requests: requestParameters.attachment_requests
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNew(documentTemplateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a template. Supply the unique template ID from either a Create Template request or template page URL.
         * @summary Delete Template
         * @param {TemplateApiDeleteDocumentTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDocumentTemplate(requestParameters: TemplateApiDeleteDocumentTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDocumentTemplate(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a template and all associated template data. Supply the unique template ID from either a Create Template request or template page URL.
         * @summary Get Template
         * @param {TemplateApiGetTemplateDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTemplateData(requestParameters: TemplateApiGetTemplateDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemplateGetTemplateDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTemplateData(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates an existing template.
         * @summary Update Template
         * @param {TemplateApiUpdateExistingTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateExistingTemplate(requestParameters: TemplateApiUpdateExistingTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemplateUpdateExistingTemplateResponse>> {
            const documentTemplateUpdateRequest: DocumentTemplateUpdateRequest = {
                name: requestParameters.name,
                subject: requestParameters.subject,
                message: requestParameters.message,
                draft: requestParameters.draft,
                expires_in: requestParameters.expires_in,
                reminders: requestParameters.reminders,
                apply_signing_order: requestParameters.apply_signing_order,
                api_application_id: requestParameters.api_application_id,
                redirect_url: requestParameters.redirect_url,
                allow_decline: requestParameters.allow_decline,
                allow_reassign: requestParameters.allow_reassign,
                decline_redirect_url: requestParameters.decline_redirect_url,
                metadata: requestParameters.metadata
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateExistingTemplate(requestParameters.id, documentTemplateUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TemplateApi - factory interface
 * @export
 */
export const TemplateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TemplateApiFp(configuration)
    return {
        /**
         * Creates a new template.
         * @summary Create Template
         * @param {TemplateApiCreateNewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNew(requestParameters: TemplateApiCreateNewRequest, options?: AxiosRequestConfig): AxiosPromise<TemplateCreateNewResponse> {
            return localVarFp.createNew(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a template. Supply the unique template ID from either a Create Template request or template page URL.
         * @summary Delete Template
         * @param {TemplateApiDeleteDocumentTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDocumentTemplate(requestParameters: TemplateApiDeleteDocumentTemplateRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteDocumentTemplate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a template and all associated template data. Supply the unique template ID from either a Create Template request or template page URL.
         * @summary Get Template
         * @param {TemplateApiGetTemplateDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplateData(requestParameters: TemplateApiGetTemplateDataRequest, options?: AxiosRequestConfig): AxiosPromise<TemplateGetTemplateDataResponse> {
            return localVarFp.getTemplateData(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an existing template.
         * @summary Update Template
         * @param {TemplateApiUpdateExistingTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExistingTemplate(requestParameters: TemplateApiUpdateExistingTemplateRequest, options?: AxiosRequestConfig): AxiosPromise<TemplateUpdateExistingTemplateResponse> {
            return localVarFp.updateExistingTemplate(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNew operation in TemplateApi.
 * @export
 * @interface TemplateApiCreateNewRequest
 */
export type TemplateApiCreateNewRequest = {
    
} & DocumentTemplateRequest

/**
 * Request parameters for deleteDocumentTemplate operation in TemplateApi.
 * @export
 * @interface TemplateApiDeleteDocumentTemplateRequest
 */
export type TemplateApiDeleteDocumentTemplateRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof TemplateApiDeleteDocumentTemplate
    */
    readonly id: string
    
}

/**
 * Request parameters for getTemplateData operation in TemplateApi.
 * @export
 * @interface TemplateApiGetTemplateDataRequest
 */
export type TemplateApiGetTemplateDataRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof TemplateApiGetTemplateData
    */
    readonly id: string
    
}

/**
 * Request parameters for updateExistingTemplate operation in TemplateApi.
 * @export
 * @interface TemplateApiUpdateExistingTemplateRequest
 */
export type TemplateApiUpdateExistingTemplateRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof TemplateApiUpdateExistingTemplate
    */
    readonly id: string
    
} & DocumentTemplateUpdateRequest

/**
 * TemplateApiGenerated - object-oriented interface
 * @export
 * @class TemplateApiGenerated
 * @extends {BaseAPI}
 */
export class TemplateApiGenerated extends BaseAPI {
    /**
     * Creates a new template.
     * @summary Create Template
     * @param {TemplateApiCreateNewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApiGenerated
     */
    public createNew(requestParameters: TemplateApiCreateNewRequest, options?: AxiosRequestConfig) {
        return TemplateApiFp(this.configuration).createNew(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a template. Supply the unique template ID from either a Create Template request or template page URL.
     * @summary Delete Template
     * @param {TemplateApiDeleteDocumentTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApiGenerated
     */
    public deleteDocumentTemplate(requestParameters: TemplateApiDeleteDocumentTemplateRequest, options?: AxiosRequestConfig) {
        return TemplateApiFp(this.configuration).deleteDocumentTemplate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a template and all associated template data. Supply the unique template ID from either a Create Template request or template page URL.
     * @summary Get Template
     * @param {TemplateApiGetTemplateDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApiGenerated
     */
    public getTemplateData(requestParameters: TemplateApiGetTemplateDataRequest, options?: AxiosRequestConfig) {
        return TemplateApiFp(this.configuration).getTemplateData(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an existing template.
     * @summary Update Template
     * @param {TemplateApiUpdateExistingTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApiGenerated
     */
    public updateExistingTemplate(requestParameters: TemplateApiUpdateExistingTemplateRequest, options?: AxiosRequestConfig) {
        return TemplateApiFp(this.configuration).updateExistingTemplate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
