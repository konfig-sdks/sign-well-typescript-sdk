/* tslint:disable */
/* eslint-disable */
/*
Resources and endpoints

When I started SignWell in 2019, I saw there was a need for an alternative to the hard-to-use and expensive e-signature software already out there. Documents can be complicated enough, but getting a document signed shouldn't be complicated too.

At SignWell, we pride ourselves not only on the ease and affordability of our e-signature process but also on our personalized and industry-leading customer support â€” whether it's for individual use or larger team accounts, SignWell is here to help you feel comfortable and confident getting your documents signed.

The SignWell mission? Simplify how documents get signed for millions of people and businesses. We're excited to help you continue to move toward the future of paperless document signing.

Ruben Gamez
Founder, SignWell

The version of the OpenAPI document: 1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AdditionalFilesMapInner } from '../models';
// @ts-ignore
import { AttachmentRequestsMapInner } from '../models';
// @ts-ignore
import { CopiedContactsMapInner } from '../models';
// @ts-ignore
import { DocumentCreateFromTemplate400Response } from '../models';
// @ts-ignore
import { DocumentCreateFromTemplate422Response } from '../models';
// @ts-ignore
import { DocumentCreateFromTemplateResponse } from '../models';
// @ts-ignore
import { DocumentCreateNewDocument400Response } from '../models';
// @ts-ignore
import { DocumentCreateNewDocument422Response } from '../models';
// @ts-ignore
import { DocumentCreateNewDocumentResponse } from '../models';
// @ts-ignore
import { DocumentDeleteDocumentResponse } from '../models';
// @ts-ignore
import { DocumentFromTemplateRequest } from '../models';
// @ts-ignore
import { DocumentGetCompletedPdf404Response } from '../models';
// @ts-ignore
import { DocumentGetCompletedPdfResponse } from '../models';
// @ts-ignore
import { DocumentGetDocumentData404Response } from '../models';
// @ts-ignore
import { DocumentGetDocumentDataResponse } from '../models';
// @ts-ignore
import { DocumentRecipientsMapInner } from '../models';
// @ts-ignore
import { DocumentRequest } from '../models';
// @ts-ignore
import { DocumentSendReminder404Response } from '../models';
// @ts-ignore
import { DocumentSendReminder422Response } from '../models';
// @ts-ignore
import { DocumentSendReminderResponse } from '../models';
// @ts-ignore
import { DocumentUpdateAndSend422Response } from '../models';
// @ts-ignore
import { DocumentUpdateAndSendResponse } from '../models';
// @ts-ignore
import { FilesMapInner } from '../models';
// @ts-ignore
import { RemindRecipientsMapInner } from '../models';
// @ts-ignore
import { SendReminderRequest } from '../models';
// @ts-ignore
import { TemplateFieldsMapInner } from '../models';
// @ts-ignore
import { TemplateRecipientsMapInner } from '../models';
// @ts-ignore
import { UpdateDocumentAndSendRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DocumentApi - axios parameter creator
 * @export
 */
export const DocumentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates and optionally sends a new document for signing. If `draft` is set to false the document will not be sent.
         * @summary Create Document from Template
         * @param {DocumentFromTemplateRequest} [documentFromTemplateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFromTemplate: async (documentFromTemplateRequest?: DocumentFromTemplateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/document_templates/documents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: documentFromTemplateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/document_templates/documents',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(documentFromTemplateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates and optionally sends a new document for signing. If `draft` is set to false the document will not be sent.
         * @summary Create Document
         * @param {DocumentRequest} [documentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewDocument: async (documentRequest?: DocumentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/documents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: documentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/documents',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(documentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a document. Deleting a document will also cancel document signing (if in progress).  Supply the unique document ID from either a Create Document request or document page URL.
         * @summary Delete Document
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDocument: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteDocument', 'id', id)
            const localVarPath = `/api/v1/documents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/documents/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a completed document PDF. Supply the unique document ID from either a document creation request or document page URL.
         * @summary Completed PDF
         * @param {string} id 
         * @param {boolean} [urlOnly] 
         * @param {boolean} [auditPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompletedPdf: async (id: string, urlOnly?: boolean, auditPage?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCompletedPdf', 'id', id)
            const localVarPath = `/api/v1/documents/{id}/completed_pdf`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKey", configuration })
            if (urlOnly !== undefined) {
                localVarQueryParameter['url_only'] = urlOnly;
            }

            if (auditPage !== undefined) {
                localVarQueryParameter['audit_page'] = auditPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/documents/{id}/completed_pdf',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a document and all associated document data. Supply the unique document ID from either a document creation request or Document page URL.
         * @summary Get Document
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentData: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDocumentData', 'id', id)
            const localVarPath = `/api/v1/documents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/documents/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends a reminder email to recipients that have not signed yet.
         * @summary Send Reminder
         * @param {string} id 
         * @param {SendReminderRequest} [sendReminderRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendReminder: async (id: string, sendReminderRequest?: SendReminderRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sendReminder', 'id', id)
            const localVarPath = `/api/v1/documents/{id}/remind`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: sendReminderRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/documents/{id}/remind',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(sendReminderRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a draft document and sends it to be signed by recipients.
         * @summary Update and Send Document
         * @param {string} id 
         * @param {UpdateDocumentAndSendRequest} [updateDocumentAndSendRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAndSend: async (id: string, updateDocumentAndSendRequest?: UpdateDocumentAndSendRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateAndSend', 'id', id)
            const localVarPath = `/api/v1/documents/{id}/send`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateDocumentAndSendRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/documents/{id}/send',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateDocumentAndSendRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocumentApi - functional programming interface
 * @export
 */
export const DocumentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DocumentApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates and optionally sends a new document for signing. If `draft` is set to false the document will not be sent.
         * @summary Create Document from Template
         * @param {DocumentApiCreateFromTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFromTemplate(requestParameters: DocumentApiCreateFromTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentCreateFromTemplateResponse>> {
            const documentFromTemplateRequest: DocumentFromTemplateRequest = {
                test_mode: requestParameters.test_mode,
                template_id: requestParameters.template_id,
                template_ids: requestParameters.template_ids,
                name: requestParameters.name,
                subject: requestParameters.subject,
                message: requestParameters.message,
                recipients: requestParameters.recipients,
                draft: requestParameters.draft,
                with_signature_page: requestParameters.with_signature_page,
                expires_in: requestParameters.expires_in,
                reminders: requestParameters.reminders,
                apply_signing_order: requestParameters.apply_signing_order,
                api_application_id: requestParameters.api_application_id,
                embedded_signing: requestParameters.embedded_signing,
                embedded_signing_notifications: requestParameters.embedded_signing_notifications,
                text_tags: requestParameters.text_tags,
                custom_requester_name: requestParameters.custom_requester_name,
                custom_requester_email: requestParameters.custom_requester_email,
                redirect_url: requestParameters.redirect_url,
                allow_decline: requestParameters.allow_decline,
                allow_reassign: requestParameters.allow_reassign,
                decline_redirect_url: requestParameters.decline_redirect_url,
                metadata: requestParameters.metadata,
                template_fields: requestParameters.template_fields,
                files: requestParameters.files,
                fields: requestParameters.fields,
                attachment_requests: requestParameters.attachment_requests,
                copied_contacts: requestParameters.copied_contacts
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFromTemplate(documentFromTemplateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates and optionally sends a new document for signing. If `draft` is set to false the document will not be sent.
         * @summary Create Document
         * @param {DocumentApiCreateNewDocumentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewDocument(requestParameters: DocumentApiCreateNewDocumentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentCreateNewDocumentResponse>> {
            const documentRequest: DocumentRequest = {
                test_mode: requestParameters.test_mode,
                files: requestParameters.files,
                name: requestParameters.name,
                subject: requestParameters.subject,
                message: requestParameters.message,
                recipients: requestParameters.recipients,
                draft: requestParameters.draft,
                with_signature_page: requestParameters.with_signature_page,
                expires_in: requestParameters.expires_in,
                reminders: requestParameters.reminders,
                apply_signing_order: requestParameters.apply_signing_order,
                api_application_id: requestParameters.api_application_id,
                embedded_signing: requestParameters.embedded_signing,
                embedded_signing_notifications: requestParameters.embedded_signing_notifications,
                text_tags: requestParameters.text_tags,
                custom_requester_name: requestParameters.custom_requester_name,
                custom_requester_email: requestParameters.custom_requester_email,
                redirect_url: requestParameters.redirect_url,
                allow_decline: requestParameters.allow_decline,
                allow_reassign: requestParameters.allow_reassign,
                decline_redirect_url: requestParameters.decline_redirect_url,
                metadata: requestParameters.metadata,
                fields: requestParameters.fields,
                attachment_requests: requestParameters.attachment_requests,
                copied_contacts: requestParameters.copied_contacts
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewDocument(documentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a document. Deleting a document will also cancel document signing (if in progress).  Supply the unique document ID from either a Create Document request or document page URL.
         * @summary Delete Document
         * @param {DocumentApiDeleteDocumentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDocument(requestParameters: DocumentApiDeleteDocumentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDocument(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets a completed document PDF. Supply the unique document ID from either a document creation request or document page URL.
         * @summary Completed PDF
         * @param {DocumentApiGetCompletedPdfRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompletedPdf(requestParameters: DocumentApiGetCompletedPdfRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentGetCompletedPdfResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompletedPdf(requestParameters.id, requestParameters.urlOnly, requestParameters.auditPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a document and all associated document data. Supply the unique document ID from either a document creation request or Document page URL.
         * @summary Get Document
         * @param {DocumentApiGetDocumentDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocumentData(requestParameters: DocumentApiGetDocumentDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentGetDocumentDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDocumentData(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sends a reminder email to recipients that have not signed yet.
         * @summary Send Reminder
         * @param {DocumentApiSendReminderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendReminder(requestParameters: DocumentApiSendReminderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentSendReminderResponse>> {
            const sendReminderRequest: SendReminderRequest = {
                recipients: requestParameters.recipients
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendReminder(requestParameters.id, sendReminderRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a draft document and sends it to be signed by recipients.
         * @summary Update and Send Document
         * @param {DocumentApiUpdateAndSendRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAndSend(requestParameters: DocumentApiUpdateAndSendRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentUpdateAndSendResponse>> {
            const updateDocumentAndSendRequest: UpdateDocumentAndSendRequest = {
                test_mode: requestParameters.test_mode,
                name: requestParameters.name,
                subject: requestParameters.subject,
                message: requestParameters.message,
                expires_in: requestParameters.expires_in,
                reminders: requestParameters.reminders,
                apply_signing_order: requestParameters.apply_signing_order,
                api_application_id: requestParameters.api_application_id,
                embedded_signing: requestParameters.embedded_signing,
                embedded_signing_notifications: requestParameters.embedded_signing_notifications,
                custom_requester_name: requestParameters.custom_requester_name,
                custom_requester_email: requestParameters.custom_requester_email,
                redirect_url: requestParameters.redirect_url,
                allow_decline: requestParameters.allow_decline,
                allow_reassign: requestParameters.allow_reassign,
                decline_redirect_url: requestParameters.decline_redirect_url,
                metadata: requestParameters.metadata
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAndSend(requestParameters.id, updateDocumentAndSendRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DocumentApi - factory interface
 * @export
 */
export const DocumentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DocumentApiFp(configuration)
    return {
        /**
         * Creates and optionally sends a new document for signing. If `draft` is set to false the document will not be sent.
         * @summary Create Document from Template
         * @param {DocumentApiCreateFromTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFromTemplate(requestParameters: DocumentApiCreateFromTemplateRequest, options?: AxiosRequestConfig): AxiosPromise<DocumentCreateFromTemplateResponse> {
            return localVarFp.createFromTemplate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates and optionally sends a new document for signing. If `draft` is set to false the document will not be sent.
         * @summary Create Document
         * @param {DocumentApiCreateNewDocumentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewDocument(requestParameters: DocumentApiCreateNewDocumentRequest, options?: AxiosRequestConfig): AxiosPromise<DocumentCreateNewDocumentResponse> {
            return localVarFp.createNewDocument(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a document. Deleting a document will also cancel document signing (if in progress).  Supply the unique document ID from either a Create Document request or document page URL.
         * @summary Delete Document
         * @param {DocumentApiDeleteDocumentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDocument(requestParameters: DocumentApiDeleteDocumentRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteDocument(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a completed document PDF. Supply the unique document ID from either a document creation request or document page URL.
         * @summary Completed PDF
         * @param {DocumentApiGetCompletedPdfRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompletedPdf(requestParameters: DocumentApiGetCompletedPdfRequest, options?: AxiosRequestConfig): AxiosPromise<DocumentGetCompletedPdfResponse> {
            return localVarFp.getCompletedPdf(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a document and all associated document data. Supply the unique document ID from either a document creation request or Document page URL.
         * @summary Get Document
         * @param {DocumentApiGetDocumentDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentData(requestParameters: DocumentApiGetDocumentDataRequest, options?: AxiosRequestConfig): AxiosPromise<DocumentGetDocumentDataResponse> {
            return localVarFp.getDocumentData(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends a reminder email to recipients that have not signed yet.
         * @summary Send Reminder
         * @param {DocumentApiSendReminderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendReminder(requestParameters: DocumentApiSendReminderRequest, options?: AxiosRequestConfig): AxiosPromise<DocumentSendReminderResponse> {
            return localVarFp.sendReminder(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a draft document and sends it to be signed by recipients.
         * @summary Update and Send Document
         * @param {DocumentApiUpdateAndSendRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAndSend(requestParameters: DocumentApiUpdateAndSendRequest, options?: AxiosRequestConfig): AxiosPromise<DocumentUpdateAndSendResponse> {
            return localVarFp.updateAndSend(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createFromTemplate operation in DocumentApi.
 * @export
 * @interface DocumentApiCreateFromTemplateRequest
 */
export type DocumentApiCreateFromTemplateRequest = {
    
} & DocumentFromTemplateRequest

/**
 * Request parameters for createNewDocument operation in DocumentApi.
 * @export
 * @interface DocumentApiCreateNewDocumentRequest
 */
export type DocumentApiCreateNewDocumentRequest = {
    
} & DocumentRequest

/**
 * Request parameters for deleteDocument operation in DocumentApi.
 * @export
 * @interface DocumentApiDeleteDocumentRequest
 */
export type DocumentApiDeleteDocumentRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DocumentApiDeleteDocument
    */
    readonly id: string
    
}

/**
 * Request parameters for getCompletedPdf operation in DocumentApi.
 * @export
 * @interface DocumentApiGetCompletedPdfRequest
 */
export type DocumentApiGetCompletedPdfRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DocumentApiGetCompletedPdf
    */
    readonly id: string
    
    /**
    * 
    * @type {boolean}
    * @memberof DocumentApiGetCompletedPdf
    */
    readonly urlOnly?: boolean
    
    /**
    * 
    * @type {boolean}
    * @memberof DocumentApiGetCompletedPdf
    */
    readonly auditPage?: boolean
    
}

/**
 * Request parameters for getDocumentData operation in DocumentApi.
 * @export
 * @interface DocumentApiGetDocumentDataRequest
 */
export type DocumentApiGetDocumentDataRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DocumentApiGetDocumentData
    */
    readonly id: string
    
}

/**
 * Request parameters for sendReminder operation in DocumentApi.
 * @export
 * @interface DocumentApiSendReminderRequest
 */
export type DocumentApiSendReminderRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DocumentApiSendReminder
    */
    readonly id: string
    
} & SendReminderRequest

/**
 * Request parameters for updateAndSend operation in DocumentApi.
 * @export
 * @interface DocumentApiUpdateAndSendRequest
 */
export type DocumentApiUpdateAndSendRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DocumentApiUpdateAndSend
    */
    readonly id: string
    
} & UpdateDocumentAndSendRequest

/**
 * DocumentApiGenerated - object-oriented interface
 * @export
 * @class DocumentApiGenerated
 * @extends {BaseAPI}
 */
export class DocumentApiGenerated extends BaseAPI {
    /**
     * Creates and optionally sends a new document for signing. If `draft` is set to false the document will not be sent.
     * @summary Create Document from Template
     * @param {DocumentApiCreateFromTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentApiGenerated
     */
    public createFromTemplate(requestParameters: DocumentApiCreateFromTemplateRequest, options?: AxiosRequestConfig) {
        return DocumentApiFp(this.configuration).createFromTemplate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates and optionally sends a new document for signing. If `draft` is set to false the document will not be sent.
     * @summary Create Document
     * @param {DocumentApiCreateNewDocumentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentApiGenerated
     */
    public createNewDocument(requestParameters: DocumentApiCreateNewDocumentRequest, options?: AxiosRequestConfig) {
        return DocumentApiFp(this.configuration).createNewDocument(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a document. Deleting a document will also cancel document signing (if in progress).  Supply the unique document ID from either a Create Document request or document page URL.
     * @summary Delete Document
     * @param {DocumentApiDeleteDocumentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentApiGenerated
     */
    public deleteDocument(requestParameters: DocumentApiDeleteDocumentRequest, options?: AxiosRequestConfig) {
        return DocumentApiFp(this.configuration).deleteDocument(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a completed document PDF. Supply the unique document ID from either a document creation request or document page URL.
     * @summary Completed PDF
     * @param {DocumentApiGetCompletedPdfRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentApiGenerated
     */
    public getCompletedPdf(requestParameters: DocumentApiGetCompletedPdfRequest, options?: AxiosRequestConfig) {
        return DocumentApiFp(this.configuration).getCompletedPdf(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a document and all associated document data. Supply the unique document ID from either a document creation request or Document page URL.
     * @summary Get Document
     * @param {DocumentApiGetDocumentDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentApiGenerated
     */
    public getDocumentData(requestParameters: DocumentApiGetDocumentDataRequest, options?: AxiosRequestConfig) {
        return DocumentApiFp(this.configuration).getDocumentData(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends a reminder email to recipients that have not signed yet.
     * @summary Send Reminder
     * @param {DocumentApiSendReminderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentApiGenerated
     */
    public sendReminder(requestParameters: DocumentApiSendReminderRequest, options?: AxiosRequestConfig) {
        return DocumentApiFp(this.configuration).sendReminder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a draft document and sends it to be signed by recipients.
     * @summary Update and Send Document
     * @param {DocumentApiUpdateAndSendRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentApiGenerated
     */
    public updateAndSend(requestParameters: DocumentApiUpdateAndSendRequest, options?: AxiosRequestConfig) {
        return DocumentApiFp(this.configuration).updateAndSend(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
