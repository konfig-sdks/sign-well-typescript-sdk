/* tslint:disable */
/* eslint-disable */
/*
Resources and endpoints

When I started SignWell in 2019, I saw there was a need for an alternative to the hard-to-use and expensive e-signature software already out there. Documents can be complicated enough, but getting a document signed shouldn't be complicated too.

At SignWell, we pride ourselves not only on the ease and affordability of our e-signature process but also on our personalized and industry-leading customer support â€” whether it's for individual use or larger team accounts, SignWell is here to help you feel comfortable and confident getting your documents signed.

The SignWell mission? Simplify how documents get signed for millions of people and businesses. We're excited to help you continue to move toward the future of paperless document signing.

Ruben Gamez
Founder, SignWell

The version of the OpenAPI document: 1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BulkSendCreateValidationCsv401Response } from '../models';
// @ts-ignore
import { BulkSendCreateValidationCsv422Response } from '../models';
// @ts-ignore
import { BulkSendCreateValidationCsvResponse } from '../models';
// @ts-ignore
import { BulkSendCsvRequest } from '../models';
// @ts-ignore
import { BulkSendGetCsvTemplate200Response } from '../models';
// @ts-ignore
import { BulkSendGetCsvTemplate401Response } from '../models';
// @ts-ignore
import { BulkSendGetCsvTemplate404Response } from '../models';
// @ts-ignore
import { BulkSendGetDocuments401Response } from '../models';
// @ts-ignore
import { BulkSendGetDocuments404Response } from '../models';
// @ts-ignore
import { BulkSendGetDocumentsResponse } from '../models';
// @ts-ignore
import { BulkSendGetInformation401Response } from '../models';
// @ts-ignore
import { BulkSendGetInformation404Response } from '../models';
// @ts-ignore
import { BulkSendGetInformationResponse } from '../models';
// @ts-ignore
import { BulkSendListBulkSendings401Response } from '../models';
// @ts-ignore
import { BulkSendListBulkSendingsResponse } from '../models';
// @ts-ignore
import { BulkSendValidateCsv401Response } from '../models';
// @ts-ignore
import { BulkSendValidateCsv422Response } from '../models';
// @ts-ignore
import { BulkSendValidateCsvResponse } from '../models';
// @ts-ignore
import { CreateBulkSendRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * BulkSendApi - axios parameter creator
 * @export
 */
export const BulkSendApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a bulk send, and it validates the CSV file before creating the bulk send.
         * @summary Create Bulk Send
         * @param {CreateBulkSendRequest} [createBulkSendRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createValidationCsv: async (createBulkSendRequest?: CreateBulkSendRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/bulk_sends`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createBulkSendRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/bulk_sends',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createBulkSendRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a CSV template that corresponds to the provided document template IDs. CSV templates are blank CSV files that have columns containing required and optional data that can be sent when creating a bulk send. Fields can be referenced by the field label. Example: [placeholder name]_[field label] could be something like customer_address or signer_company_name (if \"Customer\" and \"Signer\" were placeholder names for templates set up in SignWell).
         * @summary Get Bulk Send CSV Template
         * @param {Array<string>} templateIds 
         * @param {string} [base64] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCsvTemplate: async (templateIds: Array<string>, base64?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateIds' is not null or undefined
            assertParamExists('getCsvTemplate', 'templateIds', templateIds)
            const localVarPath = `/api/v1/bulk_sends/csv_template`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKey", configuration })
            if (templateIds) {
                localVarQueryParameter['template_ids[]'] = templateIds;
            }

            if (base64 !== undefined) {
                localVarQueryParameter['base64'] = base64;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/bulk_sends/csv_template',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information about the Bulk Send.
         * @summary Get Bulk Send Documents
         * @param {string} id 
         * @param {number} [limit] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocuments: async (id: string, limit?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDocuments', 'id', id)
            const localVarPath = `/api/v1/bulk_sends/{id}/documents`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKey", configuration })
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/bulk_sends/{id}/documents',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information about the Bulk Send.
         * @summary Get Bulk Send
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInformation: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getInformation', 'id', id)
            const localVarPath = `/api/v1/bulk_sends/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/bulk_sends/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information about the Bulk Send.
         * @summary List Bulk Sendings
         * @param {string} [userEmail] 
         * @param {number} [limit] 
         * @param {number} [page] 
         * @param {string} [apiApplicationId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBulkSendings: async (userEmail?: string, limit?: number, page?: number, apiApplicationId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/bulk_sends`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKey", configuration })
            if (userEmail !== undefined) {
                localVarQueryParameter['user_email'] = userEmail;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (apiApplicationId !== undefined) {
                localVarQueryParameter['api_application_id'] = apiApplicationId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/bulk_sends',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Validates a Bulk Send CSV file before creating the Bulk Send. It will check the structure of the CSV and the data it contains, and return any errors found.
         * @summary Validate Bulk Send CSV
         * @param {BulkSendCsvRequest} [bulkSendCsvRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateCsv: async (bulkSendCsvRequest?: BulkSendCsvRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/bulk_sends/validate_csv`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: bulkSendCsvRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/bulk_sends/validate_csv',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(bulkSendCsvRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BulkSendApi - functional programming interface
 * @export
 */
export const BulkSendApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BulkSendApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a bulk send, and it validates the CSV file before creating the bulk send.
         * @summary Create Bulk Send
         * @param {BulkSendApiCreateValidationCsvRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createValidationCsv(requestParameters: BulkSendApiCreateValidationCsvRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BulkSendCreateValidationCsvResponse>> {
            const createBulkSendRequest: CreateBulkSendRequest = {
                template_ids: requestParameters.template_ids,
                bulk_send_csv: requestParameters.bulk_send_csv,
                skip_row_errors: requestParameters.skip_row_errors,
                api_application_id: requestParameters.api_application_id,
                name: requestParameters.name,
                subject: requestParameters.subject,
                message: requestParameters.message,
                apply_signing_order: requestParameters.apply_signing_order,
                custom_requester_name: requestParameters.custom_requester_name,
                custom_requester_email: requestParameters.custom_requester_email
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createValidationCsv(createBulkSendRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetches a CSV template that corresponds to the provided document template IDs. CSV templates are blank CSV files that have columns containing required and optional data that can be sent when creating a bulk send. Fields can be referenced by the field label. Example: [placeholder name]_[field label] could be something like customer_address or signer_company_name (if \"Customer\" and \"Signer\" were placeholder names for templates set up in SignWell).
         * @summary Get Bulk Send CSV Template
         * @param {BulkSendApiGetCsvTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCsvTemplate(requestParameters: BulkSendApiGetCsvTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BulkSendGetCsvTemplate200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCsvTemplate(requestParameters.templateIds, requestParameters.base64, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns information about the Bulk Send.
         * @summary Get Bulk Send Documents
         * @param {BulkSendApiGetDocumentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocuments(requestParameters: BulkSendApiGetDocumentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BulkSendGetDocumentsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDocuments(requestParameters.id, requestParameters.limit, requestParameters.page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns information about the Bulk Send.
         * @summary Get Bulk Send
         * @param {BulkSendApiGetInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInformation(requestParameters: BulkSendApiGetInformationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BulkSendGetInformationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInformation(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns information about the Bulk Send.
         * @summary List Bulk Sendings
         * @param {BulkSendApiListBulkSendingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBulkSendings(requestParameters: BulkSendApiListBulkSendingsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BulkSendListBulkSendingsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listBulkSendings(requestParameters.userEmail, requestParameters.limit, requestParameters.page, requestParameters.apiApplicationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Validates a Bulk Send CSV file before creating the Bulk Send. It will check the structure of the CSV and the data it contains, and return any errors found.
         * @summary Validate Bulk Send CSV
         * @param {BulkSendApiValidateCsvRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateCsv(requestParameters: BulkSendApiValidateCsvRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BulkSendValidateCsvResponse>> {
            const bulkSendCsvRequest: BulkSendCsvRequest = {
                template_ids: requestParameters.template_ids,
                bulk_send_csv: requestParameters.bulk_send_csv
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateCsv(bulkSendCsvRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BulkSendApi - factory interface
 * @export
 */
export const BulkSendApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BulkSendApiFp(configuration)
    return {
        /**
         * Creates a bulk send, and it validates the CSV file before creating the bulk send.
         * @summary Create Bulk Send
         * @param {BulkSendApiCreateValidationCsvRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createValidationCsv(requestParameters: BulkSendApiCreateValidationCsvRequest, options?: AxiosRequestConfig): AxiosPromise<BulkSendCreateValidationCsvResponse> {
            return localVarFp.createValidationCsv(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches a CSV template that corresponds to the provided document template IDs. CSV templates are blank CSV files that have columns containing required and optional data that can be sent when creating a bulk send. Fields can be referenced by the field label. Example: [placeholder name]_[field label] could be something like customer_address or signer_company_name (if \"Customer\" and \"Signer\" were placeholder names for templates set up in SignWell).
         * @summary Get Bulk Send CSV Template
         * @param {BulkSendApiGetCsvTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCsvTemplate(requestParameters: BulkSendApiGetCsvTemplateRequest, options?: AxiosRequestConfig): AxiosPromise<BulkSendGetCsvTemplate200Response> {
            return localVarFp.getCsvTemplate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns information about the Bulk Send.
         * @summary Get Bulk Send Documents
         * @param {BulkSendApiGetDocumentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocuments(requestParameters: BulkSendApiGetDocumentsRequest, options?: AxiosRequestConfig): AxiosPromise<BulkSendGetDocumentsResponse> {
            return localVarFp.getDocuments(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns information about the Bulk Send.
         * @summary Get Bulk Send
         * @param {BulkSendApiGetInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInformation(requestParameters: BulkSendApiGetInformationRequest, options?: AxiosRequestConfig): AxiosPromise<BulkSendGetInformationResponse> {
            return localVarFp.getInformation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns information about the Bulk Send.
         * @summary List Bulk Sendings
         * @param {BulkSendApiListBulkSendingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBulkSendings(requestParameters: BulkSendApiListBulkSendingsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BulkSendListBulkSendingsResponse> {
            return localVarFp.listBulkSendings(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Validates a Bulk Send CSV file before creating the Bulk Send. It will check the structure of the CSV and the data it contains, and return any errors found.
         * @summary Validate Bulk Send CSV
         * @param {BulkSendApiValidateCsvRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateCsv(requestParameters: BulkSendApiValidateCsvRequest, options?: AxiosRequestConfig): AxiosPromise<BulkSendValidateCsvResponse> {
            return localVarFp.validateCsv(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createValidationCsv operation in BulkSendApi.
 * @export
 * @interface BulkSendApiCreateValidationCsvRequest
 */
export type BulkSendApiCreateValidationCsvRequest = {
    
} & CreateBulkSendRequest

/**
 * Request parameters for getCsvTemplate operation in BulkSendApi.
 * @export
 * @interface BulkSendApiGetCsvTemplateRequest
 */
export type BulkSendApiGetCsvTemplateRequest = {
    
    /**
    * 
    * @type {Array<string>}
    * @memberof BulkSendApiGetCsvTemplate
    */
    readonly templateIds: Array<string>
    
    /**
    * 
    * @type {string}
    * @memberof BulkSendApiGetCsvTemplate
    */
    readonly base64?: string
    
}

/**
 * Request parameters for getDocuments operation in BulkSendApi.
 * @export
 * @interface BulkSendApiGetDocumentsRequest
 */
export type BulkSendApiGetDocumentsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof BulkSendApiGetDocuments
    */
    readonly id: string
    
    /**
    * 
    * @type {number}
    * @memberof BulkSendApiGetDocuments
    */
    readonly limit?: number
    
    /**
    * 
    * @type {number}
    * @memberof BulkSendApiGetDocuments
    */
    readonly page?: number
    
}

/**
 * Request parameters for getInformation operation in BulkSendApi.
 * @export
 * @interface BulkSendApiGetInformationRequest
 */
export type BulkSendApiGetInformationRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof BulkSendApiGetInformation
    */
    readonly id: string
    
}

/**
 * Request parameters for listBulkSendings operation in BulkSendApi.
 * @export
 * @interface BulkSendApiListBulkSendingsRequest
 */
export type BulkSendApiListBulkSendingsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof BulkSendApiListBulkSendings
    */
    readonly userEmail?: string
    
    /**
    * 
    * @type {number}
    * @memberof BulkSendApiListBulkSendings
    */
    readonly limit?: number
    
    /**
    * 
    * @type {number}
    * @memberof BulkSendApiListBulkSendings
    */
    readonly page?: number
    
    /**
    * 
    * @type {string}
    * @memberof BulkSendApiListBulkSendings
    */
    readonly apiApplicationId?: string
    
}

/**
 * Request parameters for validateCsv operation in BulkSendApi.
 * @export
 * @interface BulkSendApiValidateCsvRequest
 */
export type BulkSendApiValidateCsvRequest = {
    
} & BulkSendCsvRequest

/**
 * BulkSendApiGenerated - object-oriented interface
 * @export
 * @class BulkSendApiGenerated
 * @extends {BaseAPI}
 */
export class BulkSendApiGenerated extends BaseAPI {
    /**
     * Creates a bulk send, and it validates the CSV file before creating the bulk send.
     * @summary Create Bulk Send
     * @param {BulkSendApiCreateValidationCsvRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkSendApiGenerated
     */
    public createValidationCsv(requestParameters: BulkSendApiCreateValidationCsvRequest, options?: AxiosRequestConfig) {
        return BulkSendApiFp(this.configuration).createValidationCsv(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches a CSV template that corresponds to the provided document template IDs. CSV templates are blank CSV files that have columns containing required and optional data that can be sent when creating a bulk send. Fields can be referenced by the field label. Example: [placeholder name]_[field label] could be something like customer_address or signer_company_name (if \"Customer\" and \"Signer\" were placeholder names for templates set up in SignWell).
     * @summary Get Bulk Send CSV Template
     * @param {BulkSendApiGetCsvTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkSendApiGenerated
     */
    public getCsvTemplate(requestParameters: BulkSendApiGetCsvTemplateRequest, options?: AxiosRequestConfig) {
        return BulkSendApiFp(this.configuration).getCsvTemplate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns information about the Bulk Send.
     * @summary Get Bulk Send Documents
     * @param {BulkSendApiGetDocumentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkSendApiGenerated
     */
    public getDocuments(requestParameters: BulkSendApiGetDocumentsRequest, options?: AxiosRequestConfig) {
        return BulkSendApiFp(this.configuration).getDocuments(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns information about the Bulk Send.
     * @summary Get Bulk Send
     * @param {BulkSendApiGetInformationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkSendApiGenerated
     */
    public getInformation(requestParameters: BulkSendApiGetInformationRequest, options?: AxiosRequestConfig) {
        return BulkSendApiFp(this.configuration).getInformation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns information about the Bulk Send.
     * @summary List Bulk Sendings
     * @param {BulkSendApiListBulkSendingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkSendApiGenerated
     */
    public listBulkSendings(requestParameters: BulkSendApiListBulkSendingsRequest = {}, options?: AxiosRequestConfig) {
        return BulkSendApiFp(this.configuration).listBulkSendings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Validates a Bulk Send CSV file before creating the Bulk Send. It will check the structure of the CSV and the data it contains, and return any errors found.
     * @summary Validate Bulk Send CSV
     * @param {BulkSendApiValidateCsvRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkSendApiGenerated
     */
    public validateCsv(requestParameters: BulkSendApiValidateCsvRequest, options?: AxiosRequestConfig) {
        return BulkSendApiFp(this.configuration).validateCsv(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
