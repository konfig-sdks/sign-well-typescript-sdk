/* tslint:disable */
/* eslint-disable */
/*
Resources and endpoints

When I started SignWell in 2019, I saw there was a need for an alternative to the hard-to-use and expensive e-signature software already out there. Documents can be complicated enough, but getting a document signed shouldn't be complicated too.

At SignWell, we pride ourselves not only on the ease and affordability of our e-signature process but also on our personalized and industry-leading customer support â€” whether it's for individual use or larger team accounts, SignWell is here to help you feel comfortable and confident getting your documents signed.

The SignWell mission? Simplify how documents get signed for millions of people and businesses. We're excited to help you continue to move toward the future of paperless document signing.

Ruben Gamez
Founder, SignWell

The version of the OpenAPI document: 1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiApplicationDeleteByIdResponse } from '../models';
// @ts-ignore
import { ApiApplicationGetDetails404Response } from '../models';
// @ts-ignore
import { ApiApplicationGetDetailsResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ApiApplicationApi - axios parameter creator
 * @export
 */
export const ApiApplicationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes an API Application from an account. Supply the unique Application ID from either the Create API Application response or the API Application edit page
         * @summary Delete API Application
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteById', 'id', id)
            const localVarPath = `/api/v1/api_applications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/api_applications/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the details of a specific API Application within an account. Supply the unique Application ID from either the Create API Application response or the API Application edit page.
         * @summary Get API Application
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDetails', 'id', id)
            const localVarPath = `/api/v1/api_applications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/api_applications/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApiApplicationApi - functional programming interface
 * @export
 */
export const ApiApplicationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApiApplicationApiAxiosParamCreator(configuration)
    return {
        /**
         * Deletes an API Application from an account. Supply the unique Application ID from either the Create API Application response or the API Application edit page
         * @summary Delete API Application
         * @param {ApiApplicationApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteById(requestParameters: ApiApplicationApiDeleteByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets the details of a specific API Application within an account. Supply the unique Application ID from either the Create API Application response or the API Application edit page.
         * @summary Get API Application
         * @param {ApiApplicationApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetails(requestParameters: ApiApplicationApiGetDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiApplicationGetDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetails(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ApiApplicationApi - factory interface
 * @export
 */
export const ApiApplicationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApiApplicationApiFp(configuration)
    return {
        /**
         * Deletes an API Application from an account. Supply the unique Application ID from either the Create API Application response or the API Application edit page
         * @summary Delete API Application
         * @param {ApiApplicationApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById(requestParameters: ApiApplicationApiDeleteByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the details of a specific API Application within an account. Supply the unique Application ID from either the Create API Application response or the API Application edit page.
         * @summary Get API Application
         * @param {ApiApplicationApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails(requestParameters: ApiApplicationApiGetDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<ApiApplicationGetDetailsResponse> {
            return localVarFp.getDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteById operation in ApiApplicationApi.
 * @export
 * @interface ApiApplicationApiDeleteByIdRequest
 */
export type ApiApplicationApiDeleteByIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ApiApplicationApiDeleteById
    */
    readonly id: string
    
}

/**
 * Request parameters for getDetails operation in ApiApplicationApi.
 * @export
 * @interface ApiApplicationApiGetDetailsRequest
 */
export type ApiApplicationApiGetDetailsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ApiApplicationApiGetDetails
    */
    readonly id: string
    
}

/**
 * ApiApplicationApiGenerated - object-oriented interface
 * @export
 * @class ApiApplicationApiGenerated
 * @extends {BaseAPI}
 */
export class ApiApplicationApiGenerated extends BaseAPI {
    /**
     * Deletes an API Application from an account. Supply the unique Application ID from either the Create API Application response or the API Application edit page
     * @summary Delete API Application
     * @param {ApiApplicationApiDeleteByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApplicationApiGenerated
     */
    public deleteById(requestParameters: ApiApplicationApiDeleteByIdRequest, options?: AxiosRequestConfig) {
        return ApiApplicationApiFp(this.configuration).deleteById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the details of a specific API Application within an account. Supply the unique Application ID from either the Create API Application response or the API Application edit page.
     * @summary Get API Application
     * @param {ApiApplicationApiGetDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApplicationApiGenerated
     */
    public getDetails(requestParameters: ApiApplicationApiGetDetailsRequest, options?: AxiosRequestConfig) {
        return ApiApplicationApiFp(this.configuration).getDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
